
// import Orbit controls
import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/controls/OrbitControls.js';

var scene = new THREE.Scene();
var camera = new THREE.PerspectiveCamera(65, window.innerWidth / window.innerHeight, 
0.1, 1500);
var renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

camera.position.set(-300, 650, -300);
camera.lookAt(0, 500, 0);

var geometry = new THREE.Geometry();
var vertices = [
  new THREE.Vector3(55, 0, 55),
  new THREE.Vector3(55, 0, -55),
  new THREE.Vector3(-55, 0, -55),
  new THREE.Vector3(-55, 0, 55),
  new THREE.Vector3(34, 500, 34),
  new THREE.Vector3(34, 500, -34),
  new THREE.Vector3(-34, 500, -34),
  new THREE.Vector3(-34, 500, 34),
  new THREE.Vector3(0, 555, 0),
];

geometry.vertices = vertices;

// top faces
geometry.faces.push(new THREE.Face3(5, 8, 6)); // front left
geometry.faces.push(new THREE.Face3(6, 8, 7)); // front right
geometry.faces.push(new THREE.Face3(7, 8, 4)); // back right 
geometry.faces.push(new THREE.Face3(4, 8, 5)); // back left

// side faces
geometry.faces.push(new THREE.Face3(2, 1, 5)); // front left
geometry.faces.push(new THREE.Face3(5, 6, 2)); // face

geometry.faces.push(new THREE.Face3(2, 3, 7)); // front right
geometry.faces.push(new THREE.Face3(7, 6, 2)); // face

geometry.faces.push(new THREE.Face3(3, 0, 4)); // back right
geometry.faces.push(new THREE.Face3(4, 7, 3)); // face

geometry.faces.push(new THREE.Face3(1, 0, 4)); // back left
geometry.faces.push(new THREE.Face3(4, 5, 1)); // face

var colors = [
  new THREE.MeshBasicMaterial({
    color: 0xFF7800, // orange (front left top)
    side: THREE.DoubleSide
  }),
  new THREE.MeshBasicMaterial({
    color: 0xFF00E4, // pink (front right top)
    side: THREE.DoubleSide
  }),
  new THREE.MeshBasicMaterial({
    color: 0x00FBFF, // light blue (back right top)
    side: THREE.DoubleSide
  }),
  new THREE.MeshBasicMaterial({
    color: 0x2F7833, // dark green (back left top)
    side: THREE.DoubleSide
  }),
  new THREE.MeshBasicMaterial({
    color: 0x0FFF00, // light green (front left side)
    side: THREE.DoubleSide
  }), 
  new THREE.MeshBasicMaterial({
    color: 0x0004FF, // dark blue (front right side)
    side: THREE.DoubleSide
  }),
  new THREE.MeshBasicMaterial({
    color: 0xFF002B,  // red (back right side)
    side: THREE.DoubleSide
  }),
  new THREE.MeshBasicMaterial({
    color: 0xC500FF, // purple (back left side)
    side: THREE.DoubleSide
  })
];

// Assign colors to faces
geometry.faces[0].materialIndex = 0; // front left top (orange)
geometry.faces[1].materialIndex = 1; // front right top (pink)
geometry.faces[2].materialIndex = 2; // back right top (light blue)
geometry.faces[3].materialIndex = 3; // back left top (dark green)
geometry.faces[4].materialIndex = 4; // front left side ( light green)
geometry.faces[5].materialIndex = 4; // front left side (light green)
geometry.faces[6].materialIndex = 5; // front right side (dark blue)
geometry.faces[7].materialIndex = 5; // front right side (dark blue)
geometry.faces[8].materialIndex = 6; // back right side (red)
geometry.faces[9].materialIndex = 6; // back right side (red)
geometry.faces[10].materialIndex = 7; // back left side (purple)
geometry.faces[11].materialIndex = 7; // back left side (purple)


// Create a mesh using the geometry and colors
var monument = new THREE.Mesh(geometry, colors);

scene.add(monument);
renderer.render(scene, camera);

var animate = () => {
  requestAnimationFrame(animate);
  monument.rotation.y += 0.01;
  renderer.render(scene, camera);
};
var controls = new OrbitControls (camera, renderer.domElement);
camera.lookAt(0, 300, 0);
animate();
