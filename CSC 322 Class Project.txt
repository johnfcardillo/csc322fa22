<!DOCTYPE html>
<html lang="en">

  <head>
    <meta charset="UTF-8">
    <title>Landscape</title>
    <style>
      body {
        margin: 0;
      }

      canvas {
        display: block;
      }

    </style>
  </head>

  <body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
      let scene, camera, renderer;

      function init() {
        const canvasWidth = 750;
        const canvasHeight = 750;


        scene = new THREE.Scene();
        scene.background = new THREE.Color(0xADD8E6);

        camera = new THREE.PerspectiveCamera(75, canvasWidth / canvasHeight, 1, 1000);
        camera.position.z = 1000;

        renderer = new THREE.WebGLRenderer({antialias: true});
        renderer.setSize(canvasWidth, canvasHeight);
        document.body.appendChild(renderer.domElement);
        let center, right, left, snow, grass, grassBlades, trunk, tree, sun,
        grayCloud, whiteCloud;


        Center();
        Right();
        Left();
        Snow();
        Grass();
        GrassBlades();
        Trunk();
        Tree();
        Sun();
        GrayCloud();
        Rain();
        WhiteCloud();
        Birds();
        //RandomColor();
        Animate();

      }
      
			function Center() 
      {
        const triangleGeometry = new THREE.BufferGeometry();
        const vertices = [
        	0, 800, 0,
          -400, -400, 0,
          400, -400, 0];
        const indices = [0, 1, 2];

        triangleGeometry.setAttribute('position', new THREE.Float32BufferAttribute
        (vertices, 3));

        triangleGeometry.setIndex(indices);

        const mountainColor = new THREE.MeshBasicMaterial({color: RandomColor()});

        center = new THREE.Mesh(triangleGeometry, mountainColor);
        center.position.y = -300;
        center.position.x = 0;

        scene.add(center);
      }
      
      function Right() 
      {
        const triangleGeometry = new THREE.BufferGeometry();
        const vertices = [
          0, 550, 0,
          -300, -300, 0,
          400, -400, 0];
        const indices = [0, 1, 2];

        triangleGeometry.setAttribute('position', new THREE.Float32BufferAttribute(
        vertices, 3));

        triangleGeometry.setIndex(indices);

        const mountainColor = new THREE.MeshBasicMaterial({color: RandomColor()});
        right = new THREE.Mesh(triangleGeometry, mountainColor);
        right.position.y = -400;
        right.position.x = 500;

        scene.add(right);
      }

      function Left () 
      {
        const triangleGeometry = new THREE.BufferGeometry();
        const vertices = [
          0, 600, 0,
          -800, -800, 0,
          800, -800, 0];
        const indices = [0, 1, 2];

        triangleGeometry.setAttribute('position', new THREE.Float32BufferAttribute(
        vertices, 3));
        triangleGeometry.setIndex(indices);

        const mountainColor = new THREE.MeshBasicMaterial({color: RandomColor()});

        left = new THREE.Mesh(triangleGeometry, mountainColor);
        left.position.y = -400;
        left.position.x = -500;
        
        scene.add(left);

      }

      function Snow()
      {
        const triangleGeometry = new THREE.BufferGeometry();
        const vertices = [
          0, 70, 0,
          -100, -100, 0,
          100, -100, 0];
        const indices = [0, 1, 2];

        triangleGeometry.setAttribute('position', new THREE.Float32BufferAttribute(
        vertices, 3));

        triangleGeometry.setIndex(indices);

        const snowColor = new THREE.MeshBasicMaterial({color: 0xffffff});
        snow = new THREE.Mesh(triangleGeometry, snowColor);
        snow.position.y = 130;
        snow.position.x = -500;

        scene.add(snow);
      }

      function Grass()
      {
        const geometry = new THREE.PlaneGeometry(10000, 150, 1)
        const grassColor = new THREE.MeshBasicMaterial({color: 0x33CC33});
        grass = new THREE.Mesh(geometry, grassColor);
        grass.position.y = -700;
        scene.add(grass);
      }

      function GrassBlades()
      {
        const group = new THREE.Group();
        const bladeWidth = 5;
        const bladeHeight = 60;
        const gap = 12;

        for (let i = 0; i < 120; i++) {
          const geometry = new THREE.PlaneGeometry(bladeWidth, bladeHeight, 1);
          const bladeColor = new THREE.MeshBasicMaterial({color: 0x33CC33});
          grassBlades = new THREE.Mesh(geometry, bladeColor);
          grassBlades.position.y = -600;
          grassBlades.position.x = -1000 + (bladeWidth + gap) * i;
          group.add(grassBlades);
        }

        scene.add(group);
      }

      function Trunk()
      {
        const geometry = new THREE.PlaneGeometry(50, 250, 1)
        const trunkColor = new THREE.MeshBasicMaterial({color: 0xa996633});
        trunk = new THREE.Mesh(geometry, trunkColor);
        trunk.position.y = -600;
        trunk.position.x = -350;
        scene.add(trunk);
      }

      function Tree()
      {
        const radiusX = 130;
        const radiusY = 100;
        const segments = 64;
        const ellipseGeometry = new THREE.BufferGeometry();

        const positions = [];
        for (let i = 0; i <= segments; i++)
        {
          const theta = (i / segments) * Math.PI * 2;
          const x = Math.cos(theta) * radiusX;
          const y = Math.sin(theta) * radiusY;
          const z = 0;
          positions.push(x, y, z);
        }

        ellipseGeometry.setAttribute('position', new THREE.Float32BufferAttribute(
        positions, 3));

        const indices = [];
        for (let i = 1; i <= segments; i++)
        {
          indices.push(0, i, i === segments ? 1 : i + 1);
        }

        ellipseGeometry.setIndex(indices);

        const treeColor = new THREE.MeshBasicMaterial({
          color: 0x006400,
          side: THREE.DoubleSide
        });

        tree = new THREE.Mesh(ellipseGeometry, treeColor);
        tree.position.x = -350;
        tree.position.y = -420;

        scene.add(tree);
      }

      function RandomColor()
      {
        const red = Math.floor(Math.random() * 256);
        const green = Math.floor(Math.random() * 256);
        const blue = Math.floor(Math.random() * 256);
        const redHex = red.toString(16).padStart(2, '0');
        const greenHex = green.toString(16).padStart(2, '0');
        const blueHex = blue.toString(16).padStart(2, '0');
        const hexColor = `#${redHex}${greenHex}${blueHex}`;

        return hexColor;
      }

      function Sun()
      {
        const geometry = new THREE.CircleGeometry(140, 140);
        const sunColor = new THREE.MeshBasicMaterial({color: 0xffff66});
        sun = new THREE.Mesh(geometry, sunColor);
        scene.add(sun);

        sun.position.x = 520;
        sun.position.y = 550;
      }


      function Birds()
      {
        const birdsColor = new THREE.LineBasicMaterial({color: 0x000000});
        const gap = -15;
        let a = 30;
        let b = 0;
        let c = -30;
        let birds = [];

        for (let i = 0; i < 5; i++)
        {
          const startPoint1 = new THREE.Vector3(a, -i * gap, 0);
          const endPoint1 = new THREE.Vector3(b, -20 - i * gap, 0);
          
          const points1 = [startPoint1, endPoint1];
          const lineGeometry1 = new THREE.BufferGeometry().setFromPoints(points1);
          const line1 = new THREE.Line(lineGeometry1, birdsColor);
          scene.add(line1);
          birds.push(line1);

          const startPoint2 = new THREE.Vector3(c, -i * gap, 0);
          const endPoint2 = new THREE.Vector3(b, -20 - i * gap, 0);
          a = a + 100;
          b = b + 100;
          c = c + 100;

          const points2 = [startPoint2, endPoint2];
          const lineGeometry2 = new THREE.BufferGeometry().setFromPoints(points2);
          const line2 = new THREE.Line(lineGeometry2, birdsColor);
          scene.add(line2);
          birds.push(line2);
        }

        function MoveBirds()
        {
          birds.forEach(bird =>
          {
            bird.position.x -= 1;

            if (bird.position.x < -800)
            {
              bird.position.x = 750;
            }
          });
        }

        function AnimateBirds()
        {
          MoveBirds();
          requestAnimationFrame(AnimateBirds);
        }

        AnimateBirds(); 
      }

      function GrayCloud()
      {
        const radiusX = 100;
        const radiusY = 50;
        const segments = 64;
        const ellipseGeometry = new THREE.BufferGeometry();

        const positions = [];
        for (let i = 0; i <= segments; i++)
        {
          const theta = (i / segments) * Math.PI * 2;
          const x = Math.cos(theta) * radiusX;
          const y = Math.sin(theta) * radiusY;
          const z = 0;
          positions.push(x, y, z);
        }

        ellipseGeometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));

        const indices = [];
        for (let i = 1; i <= segments; i++)
        {
          indices.push(0, i, i === segments ? 1 : i + 1);
        }

        ellipseGeometry.setIndex(indices);

        const cloudColor = new THREE.MeshBasicMaterial({
          color: 0xa6a6a6,
          side: THREE.DoubleSide
        });

        grayCloud = new THREE.Mesh(ellipseGeometry, cloudColor);
        grayCloud.position.x = -620;
        grayCloud.position.y = 400;

        scene.add(grayCloud); 
      }
      
      function Rain()
      {
      	const group = new THREE.Group();
        const rainWidth = 2;
        const rainHeight = 10;
        const gap = 8;
        const fallSpeed = 2.0;
        
        let raindrops = [];

        for (let i = 0; i < 16; i++) {
          const geometry = new THREE.PlaneGeometry(rainWidth, rainHeight, 1);
          const rainColor = new THREE.MeshBasicMaterial({color: 0x0066ff});
          rain = new THREE.Mesh(geometry, rainColor);
          rain.position.y = 340 + (i * 7.25);
          rain.position.x = -690 + (rainWidth + gap) * i;
          
          const delay = Math.random() * 500;
    			const initialY = 340;
          
          raindrops.push({
      		mesh: rain,
      		initialY: initialY,
          delay: delay,
    			});
          group.add(rain);
        }

        scene.add(group);
      
      function AnimateRain()
      {
    			for (let i = 0; i < raindrops.length; i++)
    			{
     				const raindrop = raindrops[i].mesh;
      			const initialY = raindrops[i].initialY;
      			const delay = raindrops[i].delay;

      			if (Date.now() - startTime > delay)
            {
        			raindrop.position.y -= fallSpeed;

        		if (raindrop.position.y < 125)
            	{
          			raindrop.position.y = initialY;
        			}
      			}
    			}

    			renderer.render(scene, camera);

    			requestAnimationFrame(AnimateRain);
       }

  				const startTime = Date.now();

  				AnimateRain();
      }
      
      function WhiteCloud()
      {
        const radiusX = 150;
        const radiusY = 80;
        const segments = 64;
        const ellipseGeometry = new THREE.BufferGeometry();

        const positions = [];
        for (let i = 0; i <= segments; i++)
        {
          const theta = (i / segments) * Math.PI * 2;
          const x = Math.cos(theta) * radiusX;
          const y = Math.sin(theta) * radiusY;
          const z = 0;
          positions.push(x, y, z);
        }

        ellipseGeometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));

        const indices = [];
        for (let i = 1; i <= segments; i++)
        {
          indices.push(0, i, i === segments ? 1 : i + 1);
        }

        ellipseGeometry.setIndex(indices);

        const cloudColor = new THREE.MeshBasicMaterial({
          color: 0xffffff,
          side: THREE.DoubleSide
        });

        whiteCloud = new THREE.Mesh(ellipseGeometry, cloudColor);
        whiteCloud.position.x = 300;
        whiteCloud.position.y = 250;

        scene.add(whiteCloud); 
      }
      
      init();
      let originalPositions = {};

      function storeOriginalPositions()
      {
        originalPositions =
        {
          center: center.position.clone(),
          right: right.position.clone(),
          left: left.position.clone(),
          snow: snow.position.clone(),
          grass: grass.position.clone(),
          grassBlades: grassBlades.position.clone(),
          trunk: trunk.position.clone(),
          tree: tree.position.clone(),
          sun: sun.position.clone(),
          grayCloud: grayCloud.position.clone(),
          whiteCloud: whiteCloud.position.clone(),
        };
      }
      
        function setOriginalPositions()
        {
          center.position.copy(originalPositions.center);
          right.position.copy(originalPositions.right);
          left.position.copy(originalPositions.left);
          snow.position.copy(originalPositions.snow);
          grass.position.copy(originalPositions.grass);
          grassBlades.position.copy(originalPositions.grassBlades);
          trunk.position.copy(originalPositions.trunk);
          tree.position.copy(originalPositions.tree);
          sun.position.copy(originalPositions.sun);
          grayCloud.position.copy(originalPositions.grayCloud);
          whiteCloud.position.copy(originalPositions.whiteCloud);
      	}
     		storeOriginalPositions();

      function Animate(event)
      {
        requestAnimationFrame(() => Animate(event));

        if (event)
        {
          const mouseX = (event.clientX / window.innerWidth) * 2 - 1;
          const mouseY = -(event.clientY / window.innerHeight) * 2 + 1;

          sun.position.x = originalPositions.sun.x + mouseX * 6;
          sun.position.y = originalPositions.sun.y + mouseY * 6;
          grayCloud.position.x = originalPositions.grayCloud.x + mouseX * 6;
          grayCloud.position.y = originalPositions.grayCloud.y + mouseY * 6;

          center.position.x = originalPositions.center.x + mouseX * 9;
          center.position.y = originalPositions.center.y + mouseY * 9;
          whiteCloud.position.x = originalPositions.whiteCloud.x + mouseX * 9;
          whiteCloud.position.y = originalPositions.whiteCloud.y + mouseY * 9;

	  right.position.x = originalPositions.right.x + mouseX * 12;
          right.position.y = originalPositions.right.y + mouseY * 12;
          left.position.x = originalPositions.left.x + mouseX * 12;
          left.position.y = originalPositions.left.y + mouseY * 12;
          snow.position.x = originalPositions.snow.x + mouseY * 12;
          snow.position.y = originalPositions.snow.y + mouseY * 12;
          
          grass.position.x = originalPositions.grass.x + mouseX * 15;
          grass.position.y = originalPositions.grass.y + mouseY * 15;
          grassBlades.position.x = originalPositions.grassBlades.x + mouseX * 15;
          grassBlades.position.y = originalPositions.grassBlades.y + mouseY * 15;
          trunk.position.x = originalPositions.trunk.x + mouseX * 15;
          trunk.position.y = originalPositions.trunk.y + mouseY * 15;
          tree.position.x = originalPositions.tree.x + mouseX * 15;
          tree.position.y = originalPositions.tree.y + mouseY * 15;
      	
          renderer.render(scene, camera);
        }
      }
      
      function Render()
      {
        renderer.render(scene, camera);
      }
      
      Animate();  
      window.addEventListener('mousemove', Animate);

    </script>
  </body>

</html>